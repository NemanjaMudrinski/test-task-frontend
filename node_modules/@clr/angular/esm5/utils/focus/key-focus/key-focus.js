/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import * as tslib_1 from "tslib";
import { EventEmitter, HostListener, Input, Output, Component, ContentChildren, QueryList } from '@angular/core';
import { ClrKeyFocusItem } from './key-focus-item';
import { ClrFocusDirection } from './enums/focus-direction.enum';
import { KeyCodes } from './../key-codes.enum';
import { preventArrowKeyScroll, getKeyCodes } from './util';
var ClrKeyFocus = /** @class */ (function () {
    function ClrKeyFocus() {
        this.direction = ClrFocusDirection.VERTICAL;
        this.focusOnLoad = false;
        this.focusChange = new EventEmitter();
        this._current = 0;
        this.subscriptions = [];
    }
    Object.defineProperty(ClrKeyFocus.prototype, "focusableItems", {
        get: function () {
            if (this._focusableItems) {
                return this._focusableItems;
            }
            else {
                return this.clrKeyFocusItems.toArray();
            }
        },
        set: function (elements) {
            // We accept a list of focusable elements (HTMLElements or existing Directives) or auto query for clrKeyFocusItem
            // We accept a list reference in the cases where we cannot use ContentChildren to query
            // ContentChildren can be unavailable if content is projected outside the scope of the component (see tabs).
            if (elements && elements.length) {
                this._focusableItems = elements;
                this.initializeFocus();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrKeyFocus.prototype, "current", {
        get: function () {
            return this._current;
        },
        enumerable: true,
        configurable: true
    });
    ClrKeyFocus.prototype.ngAfterContentInit = function () {
        this.subscriptions.push(this.listenForItemUpdates());
        this.initializeFocus();
    };
    ClrKeyFocus.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    ClrKeyFocus.prototype.handleKeyboardEvent = function (event) {
        var _this = this;
        if (this.prevKeyPressed(event) && this.currentFocusIsNotFirstItem()) {
            this.keyAction(function () { return _this._current--; });
        }
        else if (this.nextKeyPressed(event) && this.currentFocusIsNotLastItem()) {
            this.keyAction(function () { return _this._current++; });
        }
        else if (event.code === KeyCodes.Home) {
            this.keyAction(function () { return (_this._current = 0); });
        }
        else if (event.code === KeyCodes.End) {
            this.keyAction(function () { return (_this._current = _this.focusableItems.length - 1); });
        }
        preventArrowKeyScroll(event);
    };
    ClrKeyFocus.prototype.setClickedItemCurrent = function (event) {
        var position;
        if (this.focusableItems[0].nativeElement) {
            position = this.focusableItems.map(function (item) { return item.nativeElement; }).indexOf(event.target);
        }
        else {
            position = this.focusableItems.indexOf(event.target);
        }
        if (position > -1) {
            this._current = position;
        }
    };
    ClrKeyFocus.prototype.resetTabFocus = function () {
        this.currentItem.tabIndex = -1;
        this._current = 0;
        this.currentItem.tabIndex = 0;
    };
    ClrKeyFocus.prototype.moveTo = function (position) {
        var _this = this;
        if (this.positionInRange(position) && position !== this._current) {
            this.keyAction(function () { return (_this._current = position); });
        }
    };
    ClrKeyFocus.prototype.positionInRange = function (position) {
        return position >= 0 && position < this.focusableItems.length;
    };
    Object.defineProperty(ClrKeyFocus.prototype, "currentItem", {
        get: function () {
            return this.focusableItems[this._current];
        },
        enumerable: true,
        configurable: true
    });
    ClrKeyFocus.prototype.currentFocusIsNotFirstItem = function () {
        return this._current - 1 >= 0;
    };
    ClrKeyFocus.prototype.currentFocusIsNotLastItem = function () {
        return this._current + 1 < this.focusableItems.length;
    };
    ClrKeyFocus.prototype.initializeFocus = function () {
        if (this.focusableItems && this.focusableItems.length) {
            this.focusableItems.forEach(function (i) { return (i.tabIndex = -1); });
            // It is possible that the focus was on an element, whose index is no longer available.
            // This can happen when some of the focusable elements are being removed.
            // In such cases, the new focus is initialized on the last focusable element.
            if (this._current >= this.focusableItems.length) {
                this._current = this.focusableItems.length - 1;
            }
            this.currentItem.tabIndex = 0;
            if (this.focusOnLoad) {
                this.currentItem.focus();
                this.focusChange.next();
            }
        }
    };
    ClrKeyFocus.prototype.listenForItemUpdates = function () {
        var _this = this;
        return this.clrKeyFocusItems.changes.subscribe(function () {
            _this.initializeFocus();
        });
    };
    ClrKeyFocus.prototype.keyAction = function (action) {
        this.currentItem.tabIndex = -1;
        action.call(this);
        this.currentItem.tabIndex = 0;
        this.currentItem.focus();
        this.focusChange.next();
    };
    ClrKeyFocus.prototype.nextKeyPressed = function (event) {
        var keyCodes = getKeyCodes(event);
        switch (this.direction) {
            case ClrFocusDirection.VERTICAL:
                return event.key === keyCodes.ArrowDown;
            case ClrFocusDirection.HORIZONTAL:
                return event.key === keyCodes.ArrowRight;
            case ClrFocusDirection.BOTH:
                return event.key === keyCodes.ArrowDown || event.key === keyCodes.ArrowRight;
            default:
                return false;
        }
    };
    ClrKeyFocus.prototype.prevKeyPressed = function (event) {
        var keyCodes = getKeyCodes(event);
        switch (this.direction) {
            case ClrFocusDirection.VERTICAL:
                return event.key === keyCodes.ArrowUp;
            case ClrFocusDirection.HORIZONTAL:
                return event.key === keyCodes.ArrowLeft;
            case ClrFocusDirection.BOTH:
                return event.key === keyCodes.ArrowUp || event.key === keyCodes.ArrowLeft;
            default:
                return false;
        }
    };
    tslib_1.__decorate([
        Input('clrDirection'),
        tslib_1.__metadata("design:type", Object)
    ], ClrKeyFocus.prototype, "direction", void 0);
    tslib_1.__decorate([
        Input('clrFocusOnLoad'),
        tslib_1.__metadata("design:type", Object)
    ], ClrKeyFocus.prototype, "focusOnLoad", void 0);
    tslib_1.__decorate([
        Output('clrFocusChange'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ClrKeyFocus.prototype, "focusChange", void 0);
    tslib_1.__decorate([
        ContentChildren(ClrKeyFocusItem, { descendants: true }),
        tslib_1.__metadata("design:type", QueryList)
    ], ClrKeyFocus.prototype, "clrKeyFocusItems", void 0);
    tslib_1.__decorate([
        Input('clrKeyFocus'),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], ClrKeyFocus.prototype, "focusableItems", null);
    tslib_1.__decorate([
        HostListener('keydown', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ClrKeyFocus.prototype, "handleKeyboardEvent", null);
    tslib_1.__decorate([
        HostListener('click', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ClrKeyFocus.prototype, "setClickedItemCurrent", null);
    ClrKeyFocus = tslib_1.__decorate([
        Component({
            selector: '[clrKeyFocus]',
            template: '<ng-content></ng-content>'
        })
    ], ClrKeyFocus);
    return ClrKeyFocus;
}());
export { ClrKeyFocus };
//# sourceMappingURL=data:application/json;base64,