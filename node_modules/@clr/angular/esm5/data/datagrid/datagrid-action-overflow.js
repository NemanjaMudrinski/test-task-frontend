import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Inject, Input, Output, NgZone, PLATFORM_ID } from '@angular/core';
import { RowActionService } from './providers/row-action-service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { isPlatformBrowser } from '@angular/common';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { ClrAlignment } from '../../utils/popover/enums/alignment.enum';
import { ClrSide } from '../../utils/popover/enums/side.enum';
import { ClrAxis } from '../../utils/popover/enums/axis.enum';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
var clrDgActionId = 0;
var ClrDatagridActionOverflow = /** @class */ (function () {
    function ClrDatagridActionOverflow(rowActionService, commonStrings, platformId, zone, smartToggleService, popoverId) {
        var _this = this;
        this.rowActionService = rowActionService;
        this.commonStrings = commonStrings;
        this.platformId = platformId;
        this.zone = zone;
        this.smartToggleService = smartToggleService;
        this.popoverId = popoverId;
        this.subscriptions = [];
        this.smartPosition = {
            axis: ClrAxis.HORIZONTAL,
            side: ClrSide.AFTER,
            anchor: ClrAlignment.CENTER,
            content: ClrAlignment.CENTER,
        };
        this._open = false;
        this.openChange = new EventEmitter(false);
        this.rowActionService.register();
        this.subscriptions.push(this.smartToggleService.openChange.subscribe(function (openState) {
            _this.open = openState;
            if (openState) {
                _this.focusFirstButton();
            }
        }));
        this.popoverId = 'clr-action-menu' + clrDgActionId++;
    }
    ClrDatagridActionOverflow.prototype.ngOnDestroy = function () {
        this.rowActionService.unregister();
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    ClrDatagridActionOverflow.prototype.closeOverflowContent = function (event) {
        this.smartToggleService.toggleWithEvent(event);
    };
    Object.defineProperty(ClrDatagridActionOverflow.prototype, "open", {
        get: function () {
            return this._open;
        },
        set: function (open) {
            var openState = !!open;
            if (!!openState !== this.open) {
                // prevents chocolate mess
                this.smartToggleService.open = openState;
                this.openChange.emit(openState);
                this._open = openState;
            }
        },
        enumerable: true,
        configurable: true
    });
    ClrDatagridActionOverflow.prototype.focusFirstButton = function () {
        if (isPlatformBrowser(this.platformId)) {
            this.zone.runOutsideAngular(function () {
                setTimeout(function () {
                    var firstButton = document.querySelector('button.action-item');
                    if (firstButton) {
                        firstButton.focus();
                    }
                });
            });
        }
    };
    tslib_1.__decorate([
        Input('clrDgActionOverflowOpen'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], ClrDatagridActionOverflow.prototype, "open", null);
    tslib_1.__decorate([
        Output('clrDgActionOverflowOpenChange'),
        tslib_1.__metadata("design:type", Object)
    ], ClrDatagridActionOverflow.prototype, "openChange", void 0);
    ClrDatagridActionOverflow = tslib_1.__decorate([
        Component({
            selector: 'clr-dg-action-overflow',
            providers: [UNIQUE_ID_PROVIDER, ClrPopoverToggleService, ClrPopoverEventsService, ClrPopoverPositionService],
            template: "\n      <button class=\"datagrid-action-toggle\"\n              type=\"button\"\n              role=\"button\"\n              aria-haspopup=\"true\"\n              #anchor\n              [attr.aria-controls]=\"popoverId\"\n              [attr.aria-expanded]=\"open\"\n              [attr.aria-label]=\"commonStrings.keys.rowActions\"\n              clrPopoverAnchor\n              clrPopoverOpenCloseButton>\n          <clr-icon shape=\"ellipsis-vertical\" [attr.title]=\"commonStrings.keys.rowActions\"></clr-icon>\n      </button>\n\n      <div class=\"datagrid-action-overflow\"\n           role=\"menu\"\n           [id]=\"popoverId\"\n           [attr.aria-hidden]=\"!open\"\n           [attr.id]=\"popoverId\"\n           clrFocusTrap\n           (click)=\"closeOverflowContent($event)\"\n           *clrPopoverContent=\"open at smartPosition; outsideClickToClose: true; scrollToClose: true\">\n          <ng-content></ng-content>\n      </div>\n  "
        }),
        tslib_1.__param(2, Inject(PLATFORM_ID)),
        tslib_1.__param(5, Inject(UNIQUE_ID)),
        tslib_1.__metadata("design:paramtypes", [RowActionService,
            ClrCommonStringsService,
            Object,
            NgZone,
            ClrPopoverToggleService, String])
    ], ClrDatagridActionOverflow);
    return ClrDatagridActionOverflow;
}());
export { ClrDatagridActionOverflow };
//# sourceMappingURL=data:application/json;base64,