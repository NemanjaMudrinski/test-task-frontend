"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const architect_1 = require("@angular-devkit/architect");
const core_1 = require("@angular-devkit/core");
const node_1 = require("@angular-devkit/core/node");
const glob = require("glob");
const uploader_1 = require("./uploader");
const config_1 = require("./config");
exports.default = architect_1.createBuilder((builderConfig, context) => __awaiter(void 0, void 0, void 0, function* () {
    const root = core_1.normalize(context.workspaceRoot);
    const workspace = new core_1.experimental.workspace.Workspace(root, new node_1.NodeJsSyncHost());
    yield workspace
        .loadWorkspaceFromHost(core_1.normalize('angular.json'))
        .toPromise();
    if (!context.target) {
        throw new Error('Cannot deploy the application without a target');
    }
    let buildResult;
    if (builderConfig.noBuild) {
        context.logger.info(`üì¶ Skipping build`);
        buildResult = {
            success: true
        };
    }
    else {
        const configuration = builderConfig.configuration ? builderConfig.configuration : "production";
        const overrides = Object.assign({}, (builderConfig.baseHref && { baseHref: builderConfig.baseHref }));
        const build = yield context.scheduleTarget({
            target: 'build',
            project: context.target !== undefined ? context.target.project : '',
            configuration
        }, overrides);
        buildResult = yield build.result;
    }
    if (buildResult.success) {
        context.logger.info(`‚úî Build Completed`);
        const filesPath = buildResult.outputPath;
        const files = yield getFiles(filesPath);
        if (files.length === 0) {
            throw new Error('Target did not produce any files, or the path is incorrect.');
        }
        if (config_1.getAccessKeyId(builderConfig) || config_1.getSecretAccessKey(builderConfig)) {
            context.logger.info('Start uploading files...');
            const uploader = new uploader_1.Uploader(context);
            yield uploader.upload(files, filesPath, builderConfig);
            context.logger.info('‚úî Finished uploading files...');
            return { success: true };
        }
        else {
            return {
                error: `‚ùå  Missing authentication settings for AWS`,
                success: false,
            };
        }
    }
    else {
        return {
            error: `‚ùå Application build failed`,
            success: false,
        };
    }
    function getFiles(filesPath) {
        return glob.sync(`**`, {
            ignore: ['.git'],
            cwd: filesPath,
            nodir: true,
        });
    }
}));
//# sourceMappingURL=index.js.map