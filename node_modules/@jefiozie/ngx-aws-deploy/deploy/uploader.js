"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const mimeTypes = require("mime-types");
const fs = require("fs");
const path = require("path");
const config_1 = require("./config");
class Uploader {
    constructor(context) {
        this._context = context;
    }
    upload(files, filesPath, builderConfig) {
        try {
            const bucket = config_1.getBucket(builderConfig);
            const region = config_1.getRegion(builderConfig);
            if (!region || !bucket) {
                this._context.logger.error(`❌  Looks like you are missing some configuration`);
                return;
            }
        }
        catch (_a) {
            return;
        }
        return Promise.all(files.map((file) => __awaiter(this, void 0, void 0, function* () {
            yield this.uploadFile(builderConfig, path.join(filesPath, file), file);
        })));
    }
    uploadFile(options, localFilePath, originFilePath) {
        return __awaiter(this, void 0, void 0, function* () {
            AWS.config.update({ region: options.region });
            const s3 = new AWS.S3({
                apiVersion: 'latest',
                secretAccessKey: config_1.getSecretAccessKey(options),
                accessKeyId: config_1.getAccessKeyId(options),
            });
            const fileName = path.basename(localFilePath);
            const body = fs.createReadStream(localFilePath);
            body.on("error", function (err) {
                console.log("File Error", err);
            });
            const params = {
                Bucket: config_1.getBucket(options) || '',
                Key: options.subFolder ? `${options.subFolder}/${originFilePath}` : originFilePath,
                Body: body,
                ContentType: mimeTypes.lookup(fileName) || undefined,
            };
            yield s3
                .upload(params)
                .promise()
                .then(e => this._context.logger.info(`Uploaded file "${e.Key}" to ${e.Location}`))
                .catch(item => this._context.logger.error(`Error uploading file: ${item.Key}`));
        });
    }
}
exports.Uploader = Uploader;
//# sourceMappingURL=uploader.js.map